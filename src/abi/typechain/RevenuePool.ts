/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RevenuePoolInterface extends utils.Interface {
  functions: {
    "OWNER()": FunctionFragment;
    "PYRA_MARKET()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "distribute(address,uint256)": FunctionFragment;
    "getShare()": FunctionFragment;
    "getStakingRewards(address)": FunctionFragment;
    "monthlyRevenuePoolStatus(uint256,uint256)": FunctionFragment;
    "monthlyShareholdersRewards(uint256,uint256,address)": FunctionFragment;
    "shareholdersStatus(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OWNER"
      | "PYRA_MARKET"
      | "claim"
      | "distribute"
      | "getShare"
      | "getStakingRewards"
      | "monthlyRevenuePoolStatus"
      | "monthlyShareholdersRewards"
      | "shareholdersStatus"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PYRA_MARKET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getShare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "monthlyRevenuePoolStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "monthlyShareholdersRewards",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareholdersStatus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PYRA_MARKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthlyRevenuePoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthlyShareholdersRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareholdersStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export interface RevenuePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RevenuePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OWNER(overrides?: CallOverrides): Promise<[string]>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<[string]>;

    claim(
      shareholder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distribute(
      shareholder: string,
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getShare(overrides?: CallOverrides): Promise<[string]>;

    getStakingRewards(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    monthlyRevenuePoolStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        triggered: boolean;
        totalRewards: BigNumber;
        totalDistributedRewards: BigNumber;
        totalRevenue: BigNumber;
        totalDistributedRevenue: BigNumber;
      }
    >;

    monthlyShareholdersRewards(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shareholdersStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        shares: BigNumber;
        rewards: BigNumber;
        revenue: BigNumber;
      }
    >;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  OWNER(overrides?: CallOverrides): Promise<string>;

  PYRA_MARKET(overrides?: CallOverrides): Promise<string>;

  claim(
    shareholder: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distribute(
    shareholder: string,
    rewards: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getShare(overrides?: CallOverrides): Promise<string>;

  getStakingRewards(
    shareholder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  monthlyRevenuePoolStatus(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      triggered: boolean;
      totalRewards: BigNumber;
      totalDistributedRewards: BigNumber;
      totalRevenue: BigNumber;
      totalDistributedRevenue: BigNumber;
    }
  >;

  monthlyShareholdersRewards(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shareholdersStatus(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      shares: BigNumber;
      rewards: BigNumber;
      revenue: BigNumber;
    }
  >;

  stake(
    sharesAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    sharesAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    OWNER(overrides?: CallOverrides): Promise<string>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<string>;

    claim(shareholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      shareholder: string,
      rewards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShare(overrides?: CallOverrides): Promise<string>;

    getStakingRewards(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthlyRevenuePoolStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        triggered: boolean;
        totalRewards: BigNumber;
        totalDistributedRewards: BigNumber;
        totalRevenue: BigNumber;
        totalDistributedRevenue: BigNumber;
      }
    >;

    monthlyShareholdersRewards(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareholdersStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        shares: BigNumber;
        rewards: BigNumber;
        revenue: BigNumber;
      }
    >;

    stake(sharesAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      shareholder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distribute(
      shareholder: string,
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getShare(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRewards(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthlyRevenuePoolStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthlyShareholdersRewards(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareholdersStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      shareholder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distribute(
      shareholder: string,
      rewards: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingRewards(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthlyRevenuePoolStatus(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthlyShareholdersRewards(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareholdersStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

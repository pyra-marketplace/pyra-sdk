/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace RevenuePool {
  export type StakeStatusStruct = {
    sharesAmount: BigNumberish;
    revenuePerShare: BigNumberish;
  };

  export type StakeStatusStructOutput = [BigNumber, BigNumber] & {
    sharesAmount: BigNumber;
    revenuePerShare: BigNumber;
  };
}

export interface RevenuePoolInterface extends utils.Interface {
  functions: {
    "COEFFICIENT()": FunctionFragment;
    "CREATOR()": FunctionFragment;
    "PYRA_MARKET()": FunctionFragment;
    "SHARE()": FunctionFragment;
    "claim()": FunctionFragment;
    "getClaimableRevenue(address)": FunctionFragment;
    "getStakeStatus(address)": FunctionFragment;
    "revenuePerShare()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COEFFICIENT"
      | "CREATOR"
      | "PYRA_MARKET"
      | "SHARE"
      | "claim"
      | "getClaimableRevenue"
      | "getStakeStatus"
      | "revenuePerShare"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COEFFICIENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CREATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PYRA_MARKET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SHARE", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenuePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COEFFICIENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CREATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PYRA_MARKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SHARE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenuePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "RevenueClaimed(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RevenueClaimed"): EventFragment;
}

export interface RevenueClaimedEventObject {
  creator: string;
  shareholder: string;
  claimAt: BigNumber;
  revenue: BigNumber;
}
export type RevenueClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RevenueClaimedEventObject
>;

export type RevenueClaimedEventFilter = TypedEventFilter<RevenueClaimedEvent>;

export interface RevenuePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RevenuePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COEFFICIENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CREATOR(overrides?: CallOverrides): Promise<[string]>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<[string]>;

    SHARE(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getClaimableRevenue(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeStatus(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<[RevenuePool.StakeStatusStructOutput]>;

    revenuePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

  CREATOR(overrides?: CallOverrides): Promise<string>;

  PYRA_MARKET(overrides?: CallOverrides): Promise<string>;

  SHARE(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getClaimableRevenue(
    shareholder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeStatus(
    shareholder: string,
    overrides?: CallOverrides
  ): Promise<RevenuePool.StakeStatusStructOutput>;

  revenuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    sharesAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    sharesAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    CREATOR(overrides?: CallOverrides): Promise<string>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<string>;

    SHARE(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    getClaimableRevenue(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeStatus(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<RevenuePool.StakeStatusStructOutput>;

    revenuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    stake(sharesAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RevenueClaimed(address,address,uint256,uint256)"(
      creator?: string | null,
      shareholder?: string | null,
      claimAt?: null,
      revenue?: null
    ): RevenueClaimedEventFilter;
    RevenueClaimed(
      creator?: string | null,
      shareholder?: string | null,
      claimAt?: null,
      revenue?: null
    ): RevenueClaimedEventFilter;
  };

  estimateGas: {
    COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getClaimableRevenue(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeStatus(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenuePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COEFFICIENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PYRA_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHARE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getClaimableRevenue(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeStatus(
      shareholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenuePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      sharesAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}

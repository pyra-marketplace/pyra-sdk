/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { PyraZone, PyraZoneInterface } from "../PyraZone";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "pyraMarket",
        type: "address",
        internalType: "address",
      },
      {
        name: "protocolTreasury",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "BASE_FEE_POINT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "OWNER_FEE_POINT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PROTOCOL_FEE_POINT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PROTOCOL_TREASURY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PYRA_MARKET",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract PyraMarket",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "act",
    inputs: [
      {
        name: "actParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.ActParams",
        components: [
          {
            name: "assetId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionProcessDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "actWithSig",
    inputs: [
      {
        name: "actParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.ActParams",
        components: [
          {
            name: "assetId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionProcessDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "signature",
        type: "tuple",
        internalType: "struct IDataMonetizer.EIP712Signature",
        components: [
          {
            name: "signer",
            type: "address",
            internalType: "address",
          },
          {
            name: "v",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "addActions",
    inputs: [
      {
        name: "addActionsParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.AddActionsParams",
        components: [
          {
            name: "assetId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionInitDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "addActionsWithSig",
    inputs: [
      {
        name: "addActionsParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.AddActionsParams",
        components: [
          {
            name: "assetId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionInitDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "signature",
        type: "tuple",
        internalType: "struct IDataMonetizer.EIP712Signature",
        components: [
          {
            name: "signer",
            type: "address",
            internalType: "address",
          },
          {
            name: "v",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "assetIdByPublisher",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "buyTierkey",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "createTierkey",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "expiration",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "eip712Domain",
    inputs: [],
    outputs: [
      {
        name: "fields",
        type: "bytes1",
        internalType: "bytes1",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "version",
        type: "string",
        internalType: "string",
      },
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "verifyingContract",
        type: "address",
        internalType: "address",
      },
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "extensions",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getApproved",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAsset",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IDataMonetizer.Asset",
        components: [
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "publishAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publicationId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAssetOwner",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getDomainSeparator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSigNonce",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTierkeyPrice",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tradeType",
        type: "uint8",
        internalType: "enum IPyraZone.TradeType",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTierkeyPriceAfterFee",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tradeType",
        type: "uint8",
        internalType: "enum IPyraZone.TradeType",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getZoneAsset",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IPyraZone.ZoneAsset",
        components: [
          {
            name: "publishAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "publicationId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "tierkeys",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "expirations",
            type: "uint256[]",
            internalType: "uint256[]",
          },
          {
            name: "totalValues",
            type: "uint256[]",
            internalType: "uint256[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isAccessible",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isTierkeyExpired",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "liquidateTierkey",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownerOf",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "publish",
    inputs: [
      {
        name: "publishParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.PublishParams",
        components: [
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionInitDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "publishWithSig",
    inputs: [
      {
        name: "publishParams",
        type: "tuple",
        internalType: "struct IDataMonetizer.PublishParams",
        components: [
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "actions",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "actionInitDatas",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "signature",
        type: "tuple",
        internalType: "struct IDataMonetizer.EIP712Signature",
        components: [
          {
            name: "signer",
            type: "address",
            internalType: "address",
          },
          {
            name: "v",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "sellTierkey",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenByIndex",
    inputs: [
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenOfOwnerByIndex",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenURI",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetActed",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "actor",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "actions",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "actionProcessDatas",
        type: "bytes[]",
        indexed: false,
        internalType: "bytes[]",
      },
      {
        name: "actionReturnDatas",
        type: "bytes[]",
        indexed: false,
        internalType: "bytes[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetActionsAdded",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "actions",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "actionInitDatas",
        type: "bytes[]",
        indexed: false,
        internalType: "bytes[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetPublished",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "publisher",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "publicationId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "actions",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "actionInitDatas",
        type: "bytes[]",
        indexed: false,
        internalType: "bytes[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "EIP712DomainChanged",
    inputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "TierkeyBought",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "trader",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "keyPrice",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TierkeyCreated",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "tierkey",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "expiration",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TierkeyLiquidated",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "liquidator",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TierkeySold",
    inputs: [
      {
        name: "assetId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "tier",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "keyId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "trader",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "keyPrice",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "depreciatedKeyPrice",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ActionAlreadyExists",
    inputs: [],
  },
  {
    type: "error",
    name: "ActionInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "ActionNotExists",
    inputs: [],
  },
  {
    type: "error",
    name: "ArrayLengthNotEqual",
    inputs: [],
  },
  {
    type: "error",
    name: "ERC721EnumerableForbiddenBatchMint",
    inputs: [],
  },
  {
    type: "error",
    name: "ERC721IncorrectOwner",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InsufficientApproval",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidApprover",
    inputs: [
      {
        name: "approver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidOperator",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721InvalidSender",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721NonexistentToken",
    inputs: [
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ERC721OutOfBoundsIndex",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InitializeActionFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientPayment",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidShortString",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidTier",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAssetOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NotZoneOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "ProcessActionFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: [],
  },
  {
    type: "error",
    name: "ResourceNotExists",
    inputs: [],
  },
  {
    type: "error",
    name: "SignatureExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "SignatureMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "TierkeyNotExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "TierkeyNotOwned",
    inputs: [],
  },
  {
    type: "error",
    name: "ZoneAlreadyPublished",
    inputs: [],
  },
  {
    type: "error",
    name: "ZoneNotTransferable",
    inputs: [],
  },
] as const;

export class PyraZone__factory {
  static readonly abi = _abi;
  static createInterface(): PyraZoneInterface {
    return new utils.Interface(_abi) as PyraZoneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PyraZone {
    return new Contract(address, _abi, signerOrProvider) as PyraZone;
  }
}

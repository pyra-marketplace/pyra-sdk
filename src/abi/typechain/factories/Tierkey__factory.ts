/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Tierkey, TierkeyInterface } from "../Tierkey";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ERC721EnumerableForbiddenBatchMint",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "ERC721OutOfBoundsIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "KeyIdNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPyraZone",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "PYRA_ZONE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "keyId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "keyId",
        type: "uint256",
      },
    ],
    name: "getKeySnapshot",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mintAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiredAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burnAt",
            type: "uint256",
          },
        ],
        internalType: "struct Tierkey.Snapshot",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getKeys",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "keyId",
        type: "uint256",
      },
    ],
    name: "isKeyExpired",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "keyId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001a6238038062001a62833981016040819052620000349162000128565b8181600062000044838262000221565b50600162000053828262000221565b50503360805250620002ed915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008b57600080fd5b81516001600160401b0380821115620000a857620000a862000063565b604051601f8301601f19908116603f01168101908282118183101715620000d357620000d362000063565b81604052838152602092508683858801011115620000f057600080fd5b600091505b83821015620001145785820183015181830184015290820190620000f5565b600093810190920192909252949350505050565b600080604083850312156200013c57600080fd5b82516001600160401b03808211156200015457600080fd5b620001628683870162000079565b935060208501519150808211156200017957600080fd5b50620001888582860162000079565b9150509250929050565b600181811c90821680620001a757607f821691505b602082108103620001c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021c57600081815260208120601f850160051c81016020861015620001f75750805b601f850160051c820191505b81811015620002185782815560010162000203565b5050505b505050565b81516001600160401b038111156200023d576200023d62000063565b62000255816200024e845462000192565b84620001ce565b602080601f8311600181146200028d5760008415620002745750858301515b600019600386901b1c1916600185901b17855562000218565b600085815260208120601f198616915b82811015620002be578886015182559484019460019091019084016200029d565b5085821015620002dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161174b62000317600039600081816102a60152818161063c01526106e3015261174b6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806342966c68116100b85780638ccccd771161007c5780638ccccd77146102c857806395d89b41146102fd578063a22cb46514610305578063b88d4fde14610318578063c87b56dd1461032b578063e985e9c51461033e57600080fd5b806342966c68146102555780634f6ccce7146102685780636352211e1461027b57806370a082311461028e578063836ccec7146102a157600080fd5b80631bfdd0261161010a5780631bfdd026146101d657806323b872dd146101e95780632f745c59146101fc57806334e80c341461020f57806340c10f191461022f57806342842e0e1461024257600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806318160ddd146101c4575b600080fd5b61015a6101553660046112f6565b610351565b60405190151581526020015b60405180910390f35b61017761037c565b6040516101669190611363565b610197610192366004611376565b61040e565b6040516001600160a01b039091168152602001610166565b6101c26101bd3660046113ab565b610437565b005b6008545b604051908152602001610166565b61015a6101e4366004611376565b610446565b6101c26101f73660046113d5565b61048d565b6101c861020a3660046113ab565b61051d565b61022261021d366004611411565b610582565b604051610166919061142c565b6101c861023d3660046113ab565b61062f565b6101c26102503660046113d5565b6106b8565b6101c2610263366004611376565b6106d8565b6101c8610276366004611376565b610742565b610197610289366004611376565b61079b565b6101c861029c366004611411565b6107a6565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6102db6102d6366004611376565b6107ee565b6040805182518152602080840151908201529181015190820152606001610166565b610177610879565b6101c2610313366004611470565b610888565b6101c26103263660046114c2565b610893565b610177610339366004611376565b6108aa565b61015a61034c36600461159e565b61091e565b60006001600160e01b0319821663780e9d6360e01b148061037657506103768261094c565b92915050565b60606000805461038b906115d1565b80601f01602080910402602001604051908101604052809291908181526020018280546103b7906115d1565b80156104045780601f106103d957610100808354040283529160200191610404565b820191906000526020600020905b8154815290600101906020018083116103e757829003601f168201915b5050505050905090565b60006104198261099c565b506000828152600460205260409020546001600160a01b0316610376565b6104428282336109d5565b5050565b6000818152600a6020526040812054810361047457604051634c0da34b60e11b815260040160405180910390fd5b506000908152600a602052604090206001015442101590565b6001600160a01b0382166104bc57604051633250574960e11b8152600060048201526024015b60405180910390fd5b60006104c98383336109e2565b9050836001600160a01b0316816001600160a01b031614610517576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016104b3565b50505050565b6000610528836107a6565b82106105595760405163295f44f760e21b81526001600160a01b0384166004820152602481018390526044016104b3565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6060600061058f836107a6565b905060008167ffffffffffffffff8111156105ac576105ac6114ac565b6040519080825280602002602001820160405280156105d5578160200160208202803683370190505b50905081156106285760005b828110156106265760006105f5868361051d565b90508083838151811061060a5761060a61160b565b60209081029190910101525061061f81611637565b90506105e1565b505b9392505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067a5760405163e6800fab60e01b815260040160405180910390fd5b506008546000818152600a60205260409020429081905561069c908390611650565b6000828152600a60205260409020600101556103768382610ab7565b6106d383838360405180602001604052806000815250610893565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107215760405163e6800fab60e01b815260040160405180910390fd5b6000818152600a602052604090204260029091015561073f81610b1c565b50565b600061074d60085490565b82106107765760405163295f44f760e21b815260006004820152602481018390526044016104b3565b600882815481106107895761078961160b565b90600052602060002001549050919050565b60006103768261099c565b60006001600160a01b0382166107d2576040516322718ad960e21b8152600060048201526024016104b3565b506001600160a01b031660009081526003602052604090205490565b61081260405180606001604052806000815260200160008152602001600081525090565b6000828152600a6020526040812054900361084057604051634c0da34b60e11b815260040160405180910390fd5b506000908152600a6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60606001805461038b906115d1565b610442338383610b57565b61089e84848461048d565b61051784848484610bf6565b60606108b58261099c565b5060006108cd60408051602081019091526000815290565b905060008151116108ed5760405180602001604052806000815250610628565b806108f784610d1f565b604051602001610908929190611663565b6040516020818303038152906040529392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061097d57506001600160e01b03198216635b5e139f60e01b145b8061037657506301ffc9a760e01b6001600160e01b0319831614610376565b6000818152600260205260408120546001600160a01b03168061037657604051637e27328960e01b8152600481018490526024016104b3565b6106d38383836001610db2565b6000806109f0858585610eb8565b90506001600160a01b038116610a4d57610a4884600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b610a70565b846001600160a01b0316816001600160a01b031614610a7057610a708185610fb1565b6001600160a01b038516610a8c57610a8784611042565b610aaf565b846001600160a01b0316816001600160a01b031614610aaf57610aaf85856110f1565b949350505050565b6001600160a01b038216610ae157604051633250574960e11b8152600060048201526024016104b3565b6000610aef838360006109e2565b90506001600160a01b038116156106d3576040516339e3563760e11b8152600060048201526024016104b3565b6000610b2b60008360006109e2565b90506001600160a01b03811661044257604051637e27328960e01b8152600481018390526024016104b3565b6001600160a01b038216610b8957604051630b61174360e31b81526001600160a01b03831660048201526024016104b3565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561051757604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610c38903390889087908790600401611692565b6020604051808303816000875af1925050508015610c73575060408051601f3d908101601f19168201909252610c70918101906116cf565b60015b610cdc573d808015610ca1576040519150601f19603f3d011682016040523d82523d6000602084013e610ca6565b606091505b508051600003610cd457604051633250574960e11b81526001600160a01b03851660048201526024016104b3565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610d1857604051633250574960e11b81526001600160a01b03851660048201526024016104b3565b5050505050565b60606000610d2c83611141565b600101905060008167ffffffffffffffff811115610d4c57610d4c6114ac565b6040519080825280601f01601f191660200182016040528015610d76576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610d8057509392505050565b8080610dc657506001600160a01b03821615155b15610e88576000610dd68461099c565b90506001600160a01b03831615801590610e025750826001600160a01b0316816001600160a01b031614155b8015610e155750610e13818461091e565b155b15610e3e5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016104b3565b8115610e865783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600260205260408120546001600160a01b0390811690831615610ee557610ee5818486611219565b6001600160a01b03811615610f2357610f02600085600080610db2565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615610f52576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6000610fbc836107a6565b60008381526007602052604090205490915080821461100f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611054906001906116ec565b6000838152600960205260408120546008805493945090928490811061107c5761107c61160b565b90600052602060002001549050806008838154811061109d5761109d61160b565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806110d5576110d56116ff565b6001900381819060005260206000200160009055905550505050565b600060016110fe846107a6565b61110891906116ec565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106111805772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111ac576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111ca57662386f26fc10000830492506010015b6305f5e10083106111e2576305f5e100830492506008015b61271083106111f657612710830492506004015b60648310611208576064830492506002015b600a83106103765760010192915050565b61122483838361127d565b6106d3576001600160a01b03831661125257604051637e27328960e01b8152600481018290526024016104b3565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016104b3565b60006001600160a01b03831615801590610aaf5750826001600160a01b0316846001600160a01b031614806112b757506112b7848461091e565b80610aaf5750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b03198116811461073f57600080fd5b60006020828403121561130857600080fd5b8135610628816112e0565b60005b8381101561132e578181015183820152602001611316565b50506000910152565b6000815180845261134f816020860160208601611313565b601f01601f19169290920160200192915050565b6020815260006106286020830184611337565b60006020828403121561138857600080fd5b5035919050565b80356001600160a01b03811681146113a657600080fd5b919050565b600080604083850312156113be57600080fd5b6113c78361138f565b946020939093013593505050565b6000806000606084860312156113ea57600080fd5b6113f38461138f565b92506114016020850161138f565b9150604084013590509250925092565b60006020828403121561142357600080fd5b6106288261138f565b6020808252825182820181905260009190848201906040850190845b8181101561146457835183529284019291840191600101611448565b50909695505050505050565b6000806040838503121561148357600080fd5b61148c8361138f565b9150602083013580151581146114a157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156114d857600080fd5b6114e18561138f565b93506114ef6020860161138f565b925060408501359150606085013567ffffffffffffffff8082111561151357600080fd5b818701915087601f83011261152757600080fd5b813581811115611539576115396114ac565b604051601f8201601f19908116603f01168101908382118183101715611561576115616114ac565b816040528281528a602084870101111561157a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156115b157600080fd5b6115ba8361138f565b91506115c86020840161138f565b90509250929050565b600181811c908216806115e557607f821691505b60208210810361160557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161164957611649611621565b5060010190565b8082018082111561037657610376611621565b60008351611675818460208801611313565b835190830190611689818360208801611313565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906116c590830184611337565b9695505050505050565b6000602082840312156116e157600080fd5b8151610628816112e0565b8181038181111561037657610376611621565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f9a80274f30feebd3d2a4ca3934352307082145863bf06b2e9bb6472ed134f9064736f6c63430008150033";

type TierkeyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TierkeyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tierkey__factory extends ContractFactory {
  constructor(...args: TierkeyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Tierkey> {
    return super.deploy(name, symbol, overrides || {}) as Promise<Tierkey>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): Tierkey {
    return super.attach(address) as Tierkey;
  }
  override connect(signer: Signer): Tierkey__factory {
    return super.connect(signer) as Tierkey__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TierkeyInterface {
    return new utils.Interface(_abi) as TierkeyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Tierkey {
    return new Contract(address, _abi, signerOrProvider) as Tierkey;
  }
}
